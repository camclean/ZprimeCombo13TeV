// the names of all model parameters
parameters = ("mu_s", "mu_b");

// the observables of the model
observables = {
   // mass variable in the signal region has 100 bins on
   // the range (0, 500):
   mass = {
      range = (0.0, 500.0);
      nbins = 100;
   };
   
   // counting-only variable for the sideband, i.e., one bin
   // on an arbitrary range:
   sb = {
      range = (0.0, 1.0);
      nbins = 1;
   };
};

tau = 10.0;

// flat template, normalized to tau for the sideband counting part:
t_sb_1 = {
   type = "fixed_poly";
   observable = "sb";
   normalize_to = "@tau";
   coefficients = [1.0];
};

// templates from a root file for the others:
t_s_1 = {
   type = "root_histogram";
   filename = "results/templates.root";
   histoname = "bkg";
   normalize_to = 1.0;
};

t_s_2 = {
   type = "root_histogram";
   filename = "results/templates.root";
   histoname = "signal";
   normalize_to = 1.0;
};

// within the model, the predition is given for each observable by listing,
// the terms of the sum in eq. (2). For each term, a
// "coefficient-function" and a "histogram" is specified which correspond
// to c_ik and t_ik in eq. (2).
example_model = {
   mass = {
      background = {
         coefficient-function = { type = "mult"; parameters = ("mu_b"); };
         histogram = "@t_s_1";
      };
      signal = {
         coefficient-function = { type = "mult"; parameters = ("mu_s"); };
         histogram = "@t_s_2";
      };
   };
   
   sb = {
      background = {
         coefficient-function = { type = "mult"; parameters = ("mu_b"); };
         histogram = "@t_sb_1";
      };
   };
   
   // as distribution for the parameters, the product of two
   // flat distributions is used which are defined below.
   parameter-distribution = {
       type = "product_distribution";
       distributions = ("@mu_b-flat", "@mu_s-flat");
   };
};

// use flat distributions which restrict the
// mu parameters to positive values, but do not add an additional
// term to the likelihood function. If sampling from these
// distributions, they will always return a fixed value
// given by "fix-sample-value". This value is also used as
// initial guess for likelihood function minimization.
// As initial step size for minimization or Markov Chains,
// the "width" parameter is used.
mu_b-flat = {
   type = "flat_distribution";
   mu_b = {
      range = (0.0, "inf");
      fix-sample-value = 20.0;
      width = 2.0;
    };
};

mu_s-flat = {
   type = "flat_distribution";
   mu_s = {
      range = (0.0, "inf");
      fix-sample-value = 10.0;
      width = 1.0;
   };
};
